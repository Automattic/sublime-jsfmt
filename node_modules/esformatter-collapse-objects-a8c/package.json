{
  "name": "esformatter-collapse-objects-a8c",
  "version": "0.1.0",
  "description": "esformatter plugin: conditionally collapses objects and array literals, a8c fork",
  "main": "index.js",
  "scripts": {
    "test": "mocha --ui bdd --reporter spec test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/automattic/esformatter-collapse-objects.git"
  },
  "keywords": [
    "esformatter",
    "string",
    "AST"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/automattic/esformatter-collapse-objects"
  },
  "homepage": "https://github.com/automattic/esformatter-collapse-objects",
  "devDependencies": {
    "mocha": "https://github.com/millermedeiros/mocha/tarball/latest",
    "chai": "^1.4",
    "esformatter": "^0.6.1"
  },
  "dependencies": {
    "defaults-deep": "^0.2.1",
    "rocambole": "^0.5.1",
    "rocambole-token": "^1.2.1"
  },
  "readme": "# esformatter-collapse-objects\n\n[esformatter](https://github.com/millermedeiros/esformatter) plugin for\nconditionally collapsing object and array literals.\n\nAn Automattic fork of [wbinnssmith's original](https://github.com/wbinnssmith/esformatter-collapse-objects)\n\n\n## Usage\n\ninstall it:\n\n```sh\nnpm install esformatter-collapse-objects-a8c\n```\n\nand something like this to your esformatter config file:\n\n```json\n{\n  \"plugins\": [\n    \"esformatter-collapse-objects\"\n  ],\n  \"collapseObjects\": {\n    \"ObjectExpression\": {\n      \"maxLineLength\": 80,\n      \"maxKeys\": 3,\n      \"forbidden\": [\n        \"FunctionExpression\"\n      ]\n    },\n    \"ArrayExpression\": {\n      \"maxLineLength\": 80,\n      \"maxKeys\": 5,\n      \"forbidden\": [\n        \"FunctionExpression\"\n      ]\n    }\n  }\n}\n```\n\n## Important\n\nIn order to collapse Array literals, you need to have esformatter expand them in\nthe first place. Add the following to your esformatter config when collapsing\nArrays:\n\n```json\n\"lineBreak\": {\n  \"before\": {\n    \"ArrayExpressionClosing\": 1\n  },\n  \"after\": {\n    \"ArrayExpressionOpening\": 1,\n    \"ArrayExpressionComma\": 1\n  }\n},\n```\n\n## Options\n\nOptions map esprima AST Node types (in this case both ObjectExpression and\nArrayExpression) to their respective options, just like indentation in\nesformatter.\n\nYou can also avoid collapsing literals under certain conditions\nlike a maximum number of keys, or when they contain other nodes like\nFunctionExpression.\n\n```js\n[function foo() { return 'bar' }]\n```\n\nfor example, could never occur since FunctionExpression is forbidden when\ntrying to collapse a literal if this is set.\n\nThe following is the default configuration for the plugin:\n\n```js\n\n{\n  ObjectExpression: {\n    maxLineLength: 80,\n    maxKeys: 3,\n    forbidden: [\n      'FunctionExpression'\n    ]\n  },\n  ArrayExpression: {\n    maxLineLength: 80,\n    maxKeys: 3,\n    forbidden: [\n      'FunctionExpression'\n    ]\n  }\n}\n```\n\n## JavaScript API\n\nRegister the plugin and call esformatter like so:\n\n```js\n// register plugin\nesformatter.register(require('esformatter-collapse-objects'));\n// pass options as second argument\nvar output = esformatter.format(str, {\n  \"collapseObjects\": {\n    \"ObjectExpression\": {\n      maxLineLength: 80,\n      maxKeys: 3,\n      forbidden: [\n        'FunctionExpression'\n      ]\n    },\n    \"ArrayExpression\": {\n      maxLineLength: 80,\n      maxKeys: 5,\n      forbidden: [\n        'FunctionExpression'\n      ]\n    }\n  }\n});\n```\n\n## License\n\nReleased under the [MIT License](http://opensource.org/licenses/MIT).\n\n## Credits\n\nHuge thanks to JÃ¶rn Zaefferer, who published [an MIT-licensed gist](https://gist.github.com/jzaefferer/23bef744ffea751b2668)\nwhich serves as the foundation for this module.\n",
  "readmeFilename": "README.md",
  "gitHead": "0b83502cbc17804fe916e5cf83b6eed8af4b1512",
  "_id": "esformatter-collapse-objects-a8c@0.1.0",
  "_shasum": "bc551b5ea64be9bcd681ff03a141ea18ea1de6b2",
  "_from": "esformatter-collapse-objects-a8c@>=0.1.0 <0.2.0"
}
